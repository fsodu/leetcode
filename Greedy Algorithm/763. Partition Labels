class Solution {
    public List<Integer> partitionLabels(String s) {
        
        List<Integer> res = new ArrayList<>();
        if (s == null || s.length() == 0) return res; 
        res.add(1);
        if (s.length() == 1) return res; 
        res.remove(0);
        
        Map<Character, int[]> map = new HashMap<>();
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int[] part = map.getOrDefault(c, new int[]{i, i}); 
            part[1] = i;
            map.put(c, part);
        }
        
        int[][] arrays = new int[map.size()][2];
        int index = 0;
        for (int[] part : map.values()) {
            arrays[index++] = part;
        }
        
        Arrays.sort(arrays, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return (o1[0] > o2[0]) ? 1 : ((o1[0] == o2[0]) ? 0 : -1);
            }
        });
        
        
        for (int i = 0; i < arrays.length - 1; i++) {
            int size = arrays[i][1] - arrays[i][0] + 1;
            if (overlap(arrays[i], arrays[i + 1])) {
                arrays[i + 1][0] = Math.min(arrays[i][0], arrays[i + 1][0]);
                arrays[i + 1][1] = Math.max(arrays[i][1], arrays[i + 1][1]);
            } else {
                res.add(size);
            }
            if (i == arrays.length - 2) res.add(arrays[i + 1][1] - arrays[i + 1][0] + 1);
        }
                
        return res; 
    
    }
    
    
    public boolean overlap(int[] a, int[] b) {
        return !(a[1] < b[0] || b[1] < a[0]);
    }
    
    
}
