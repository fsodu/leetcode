
// 由于字符串只含有小写字符，总共 26 位，因此可以用一个 32 位的整数来存储每个字符是否出现过。

class Solution {
    public int maxProduct(String[] words) {
        int max = 0; 
        int[] chars = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            for (char c : words[i].toCharArray()) {
                chars[i] = chars[i] | 1 << (c - 'a');
            }
        }
        for (int i = 0; i < words.length - 1; i++) {
            for (int j = i + 1; j < words.length; j++) {
                if ((chars[i] & chars[j]) == 0) {
                    max = Math.max(max, words[i].length() * words[j].length());
                }
            }
        }
        return max; 
    }
}


// slow solution 

class Solution {
    public int maxProduct(String[] words) {
        int max = 0; 
        int[][] chars = new int[words.length][26];
        for (int i = 0; i < words.length; i++) {
            chars[i] = countChars(words[i]);
        }
        for (int i = 0; i < words.length - 1; i++) {
            for (int j = i + 1; j < words.length; j++) {
                if (noCommonLetter(chars, i, j)) {
                    max = Math.max(max, words[i].length() * words[j].length());
                }
            }
        }
        return max; 
    }
    
    public boolean noCommonLetter(int[][] chars, int a, int b) {
        int[] char1 = chars[a];
        int[] char2 = chars[b];
        for (int i = 0; i < 26; i++) {
            if (char1[i] > 0 && char2[i] > 0) return false; 
        }
        return true;
    }
    
    public int[] countChars(String a) {
        int[] char1 = new int[26];
        for (char c : a.toCharArray()) {
            char1[c - 'a']++;
        }
        return char1; 
    }
}
