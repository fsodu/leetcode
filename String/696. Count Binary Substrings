// count first half and second half

class Solution {
    public int countBinarySubstrings(String s) {
        int preLen = 0, curLen = 1, count = 0;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                curLen++;
            } else {
                preLen = curLen;
                curLen = 1;
            }

            if (preLen >= curLen) {
                count++;
            }
        }
        return count;
    }
}

// start from middle

class Solution {
    public int countBinarySubstrings(String s) {
        if (s.length() == 1) return 0; 
        int count = 0;
        for (int i = 1; i < s.length(); i++) {
            count += get(s, i, 1);
            count += get(s, i, 0);
        }
        return count; 
    }
    
    public int get(String s, int a, int type) {
        char front = (type == 1) ? '1' : '0'; 
        char back = (type == 1) ? '0' : '1';
        if (s.charAt(a - 1) != front || s.charAt(a) != back) return 0; 
        int start = a - 1, end = a; 
        int count = 1; 
        while (start > 0 && end < s.length() - 1) {
            start--; 
            end++;
            if (s.charAt(start) != front || s.charAt(end) != back) break;
            count++;
        }
        return count; 
    }
}

