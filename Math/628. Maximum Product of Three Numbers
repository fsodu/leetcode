class Solution {
    public int maximumProduct(int[] nums) {
        if (nums.length == 3) return nums[0] * nums[1] * nums[2];
        Arrays.sort(nums);
        
        if (nums[nums.length - 3] == 0) return nums[0] * nums[1] * nums[nums.length - 1];
        else if (nums[nums.length - 3] < 0) {
            if (nums[nums.length - 1] < 0) 
                return nums[nums.length - 3] * nums[nums.length - 2] * nums[nums.length - 1];
            else if (nums[nums.length - 1] == 0) return 0; 
            else return nums[0] * nums[1] * nums[nums.length - 1];
        } else {
            return Math.max(nums[nums.length - 3] * nums[nums.length - 2] * nums[nums.length - 1], 
                            nums[0] * nums[1] * nums[nums.length - 1]);
        }
    }
}

// Time: NlogN

class Solution {
    public int maximumProduct(int[] nums) {
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE; 
        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE; 
        
        for (int i : nums) {
            if (i >= max1) {
                max3 = max2; 
                max2 = max1; 
                max1 = i;
            } else if (i >= max2) {
                max3 = max2; 
                max2 = i;
            } else if (i > max3) {
                max3 = i;
            }
            
            if (i <= min1) {
                min2 = min1; 
                min1 = i;
            } else if (i < min2) {
                min2 = i;
            }
        }
        
        return Math.max(max1 * max2 * max3, min1 * min2 * max1);
    }
}

// time: N
