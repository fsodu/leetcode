/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 class Solution {
    
    private int minDiff = Integer.MAX_VALUE; 
    private TreeNode pre = null;
        
    public int getMinimumDifference(TreeNode root) {
        inorder(root);
        return minDiff;
    }
    
    public void inorder(TreeNode root) {
        if (root == null) return;
        inorder(root.left);
        if (pre != null) minDiff = Math.min(minDiff, root.val - pre.val); 
        pre = root; 
        inorder(root.right);
    }
}
 
 
 
class Solution {
    
    private int min = Integer.MAX_VALUE; 
    
    public int getMinimumDifference(TreeNode root) {
        if (root == null) return min; 
        if (root.left == null && root.right == null) return min; 
        TreeNode left = findLeft(root);
        TreeNode right = findRight(root);
        if (root.left != null) 
            min = Math.min(min, Math.abs(root.val - left.val));
            min = Math.min(min, getMinimumDifference(root.left));
        if (root.right != null) {
            min = Math.min(min, Math.abs(root.val - right.val));
            min = Math.min(min, getMinimumDifference(root.right));
        }
        return min; 
    }
    
    public TreeNode findLeft(TreeNode root) {
        if (root == null || root.left == null) return null; 
        TreeNode next = root.left; 
        TreeNode left = next;
        while (next != null) {
            left = next;
            next = left.right;
        }
        return left;
    }
    
    public TreeNode findRight(TreeNode root) {
        if (root == null || root.right == null) return null; 
        TreeNode next = root.right; 
        TreeNode right = next;
        while (next != null) {
            right = next;
            next = right.left;
        }
        return right;
    }
}
