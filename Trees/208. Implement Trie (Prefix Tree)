class Trie {

    
    public class Node {
        Node[] childs = new Node[26];
        boolean isLeaf; 
    }
    
    Node root; 

    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) {
        Node curr = root; 
        for (char c : word.toCharArray()) {
            if (curr.childs[c - 'a'] == null) curr.childs[c - 'a'] = new Node();
            curr = curr.childs[c - 'a'];
        }
        curr.isLeaf = true;
    }
    
    public boolean search(String word) {
        Node curr = root; 
        for (char c : word.toCharArray()) {
            if (curr.childs[c - 'a'] != null) curr = curr.childs[c - 'a'];
            else return false;
        }
        if (!curr.isLeaf) return false; 
        return true; 
    }
    
    public boolean startsWith(String prefix) {
        Node curr = root; 
        for (char c : prefix.toCharArray()) {
            if (curr.childs[c - 'a'] != null) curr = curr.childs[c - 'a'];
            else return false; 
        }
        return true; 
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
