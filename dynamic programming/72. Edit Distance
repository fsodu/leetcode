class Solution {
    public int minDistance(String word1, String word2) {
        
        int m = word1.length();
        int n = word2.length();
        
        if (m == 0 && n == 0) return 0; 
        if (m == 0) return n; 
        if (n == 0) return m; 
        
        int[][] dp = new int[m][n];
        boolean equal1 = false, equal2 = false;  
        
        for (int i = 0; i < m; i++) {
            equal1 = equal1 || word1.charAt(i) == word2.charAt(0); 
            dp[i][0] = equal1 ? i : i + 1; 
        }

        for (int j = 0; j < n; j++) {
            equal2 = equal2 || word1.charAt(0) == word2.charAt(j); 
            dp[0][j] = equal2 ? j : j + 1; 
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (word1.charAt(i) == word2.charAt(j)) {
                    dp[i][j] = dp[i - 1][j - 1]; 
                } else {
                    dp[i][j] = 
                        Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;
                }
            }
        }
        
        return dp[m - 1][n - 1];                                                          
    }
}



