
class Solution {
    
    private int[][] move = new int[][]{{0, 1}, {1, 0}};
    private int min = Integer.MAX_VALUE; 
    
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0) return 0; 
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (i == 0 && j == 0) continue; 
                else if (i == 0) grid[i][j] = grid[i][j] + grid[i][j - 1];
                else if (j == 0) grid[i][j] = grid[i][j] + grid[i - 1][j];
                else grid[i][j] = grid[i][j] + Math.min(grid[i][j - 1], grid[i - 1][j]);
            }
        }
        return grid[grid.length - 1][grid[0].length - 1];
    }
}


// EXCEEDS TIME LIMIT!

class Solution {
    
    private int[][] move = new int[][]{{0, 1}, {1, 0}};
    private int min = Integer.MAX_VALUE; 
    
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0) return 0; 
        backtrack(grid, 0, 0, 0);
        return min; 
    }
    
    public void backtrack(int[][] grid, int row, int col, int sum) {
        sum += grid[row][col];
        if (col == grid[0].length - 1 && row == grid.length - 1) {
            min = Math.min(min, sum);
            return;
        } 
        if (row < grid.length - 1) backtrack(grid, row + 1, col, sum);
        if (col < grid[0].length - 1) backtrack(grid, row, col + 1, sum);
    }
}
