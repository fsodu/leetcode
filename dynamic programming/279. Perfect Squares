class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        dp[1] = 1; 
        
        for (int i = 2; i <= n; i++) {
            dp[i] = i; 
            for (int j = 1; j <= Math.sqrt(i); j++) {
                dp[i] = Math.min(dp[i], 1 + dp[i - j * j]);
            }
        }
        
        return dp[n];
     }
}


class Solution {
    
    public int numSquares(int n) {
        
        if ((int)Math.sqrt(n) * (int)Math.sqrt(n) == n) return 1; 
        
        Queue<Integer> q = new ArrayDeque<>();
        q.offer(0);
        int count = 0; 
        
        while (!q.isEmpty()) {
            int size = q.size();
            for (int k = 0; k < size; k++) {
                int curr = q.poll();
                for (int i = 1; i <= Math.sqrt(n); i++) {
                    if (curr + i * i > n) continue;
                    if (curr + i * i == n) return count + 1; 
                    q.offer(curr + i * i);
                }
            }
            count++;
        }
        
        return -1; 
        
    }
    
    
}
