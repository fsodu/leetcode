class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length]; 
        if (nums == null || nums.length == 0) return 0; 
        if (nums.length == 1) return 1; 
        dp[0] = 1; 
        
        for (int i = 1; i < nums.length; i++) {
            int max = 0; 
            for (int j = 0; j < i; j++) {
                if (nums[i] <= nums[j]) continue;
                max = Math.max(max, dp[j]);
            }
            dp[i] = max + 1; 
        }
        
        int result = 0; 
        for (int i : dp) {
            result = Math.max(result, i);
        }
        
        return result; 

    }
}


// NLOGN solution 

class Solution {
    public int lengthOfLIS(int[] nums) {
        
        if (nums == null || nums.length == 0) return 0; 
        
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int max = 0; 
        
        for (int i = 1; i < nums.length; i++) {
            int index = binarySearch(dp, 0, max, nums[i]);
            if (index > max) {
                dp[index] = nums[i];
                max++;
            }
            else if (dp[index] > nums[i]) dp[index] = nums[i];
        }
        
        return max + 1; 
        
    }
    
    public int binarySearch(int[] dp, int start, int end, int number) {
        
        if (start > end) return start;
        
        int middle = start + (end - start) / 2; 
        if (number == dp[middle]) {
            return middle;
        } else if (number > dp[middle]) {
            return binarySearch(dp, middle + 1, end, number);
        } else {
            return binarySearch(dp, start, middle - 1, number);
        }
    }
}
