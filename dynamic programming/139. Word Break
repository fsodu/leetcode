/* exceeds time limit */

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        
        return wordBreak(s, wordDict, 0);
    }
    
    
    public boolean wordBreak(String s, List<String> wordDict, int start) {
        if (start == s.length()) return true; 
        for (String curr : wordDict) {
            if (start + curr.length() > s.length()) continue; 
            boolean hasWord = true; 
            for (int i = 0; i < curr.length(); i++) {
                if (curr.charAt(i) != s.charAt(start + i)) hasWord = false;
            }
            if (hasWord) {
                if (wordBreak(s, wordDict, start + curr.length())) return true; 
            }
        }
        return false; 
    }
}


class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {

        int n = s.length();
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true; 
        
        for (int k = 1; k <= n; k++) {
            for (String curr : wordDict) {
                if (curr.length() > k) continue; 
                if (curr.equals(s.substring(k - curr.length(), k))) {
                    dp[k] = dp[k] || dp[k - curr.length()];
                }
            }

        }
        
        return dp[s.length()];
    }
}
