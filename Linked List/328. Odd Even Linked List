public ListNode oddEvenList(ListNode head) {
    if (head == null) {
        return head;
    }
    ListNode odd = head, even = head.next, evenHead = even;
    while (even != null && even.next != null) {
        odd.next = odd.next.next;
        odd = odd.next;
        even.next = even.next.next;
        even = even.next;
    }
    odd.next = evenHead;
    return head;
}


class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) return head; 
        if (head.next.next == null) return head; 
        ListNode curr = head; 
        int size = 1; 
        
        while (curr.next != null) {
            curr = curr.next;
            size++;
        }
        
        ListNode last = curr, prev = head; 
        size /= 2; 
        curr = head.next; 
        
        while (size > 0) {
            prev.next = prev.next.next; 
            last.next = curr; 
            curr.next = null;
            last = curr; 
            if (prev.next != null) prev = prev.next; 
            if (prev.next != null) curr = prev.next; 
            size--; 
        }
        
        return head; 
        
    }
}
