class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        ListNode newFirst; 
        
        if (list1 == null) { return list2;} 
        else if (list2 == null) { return list1; } 
        else if (list1.val < list2.val) {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        } else {
            list2.next = mergeTwoLists(list2.next, list1);
            return list2;
        }    
    }
  

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null) return list2; 
        if (list2 == null) return list1; 
        
        ListNode curr = new ListNode();
        ListNode sentinel = curr; 
        
        while (list1 != null && list2 != null) {
            curr.next = (list1.val < list2.val) ? list1 : list2;
            curr = curr.next; 
            if (curr == list1) list1 = list1.next; 
            else list2 = list2.next;
        }
        
        while (list1 != null) {
            curr.next = list1; 
            list1 = list1.next; 
            curr = curr.next;
        }
        
        while (list2 != null) {
            curr.next = list2; 
            list2 = list2.next; 
            curr = curr.next;
        }
        
        return sentinel.next; 
    }
}
