class Solution {
    
    Map<Integer, List<Character>> map = new HashMap<>();
    
    public List<String> letterCombinations(String digits) {
    
        
        map.put(2, Arrays.asList('a', 'b', 'c'));
        map.put(3, Arrays.asList('d', 'e', 'f'));
        map.put(4, Arrays.asList('g', 'h', 'i'));
        map.put(5, Arrays.asList('j', 'k', 'l'));
        map.put(6, Arrays.asList('m', 'n', 'o'));
        map.put(7, Arrays.asList('p', 'q', 'r', 's'));
        map.put(8, Arrays.asList('t', 'u', 'v'));
        map.put(9, Arrays.asList('w', 'x', 'y', 'z'));
        
        List<String> res = new ArrayList<>();
        if (digits == null || digits.length() == 0) return res;
        
        char[] nums = digits.toCharArray();
        backtrack(res, "", nums, 0);
        
        return res; 
        
    }
    
    public void backtrack(List<String> res, String currString, char[] nums, int start) {
        if (start == nums.length) {
            res.add(currString);
            return;
        }
        String newString = currString;
        int number = nums[start] - '0';
        if (number == 0 || number == 1) {
            backtrack(res, currString, nums, start + 1);
            return;
        }
        for (char c : map.get(number)) {
            newString += c;
            backtrack(res, newString, nums, start + 1);
            newString = currString;
        }
        
    }
}
