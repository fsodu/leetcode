class Solution {
    
    private int[] DIR = new int[]{1, 0, -1, 0, 1};
    
    public void solve(char[][] board) {
        
        if (board == null || board.length <= 2 || board[0].length <= 2) return;
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'X') continue;
                if (dfs(board, i, j)) replace(board, 'V', 'X');
                else replace(board, 'V', 'O');
            }
        }
        
    }
    
    public void replace(char[][] board, char a, char b) {
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] - a == 0) board[i][j] = b; 
            }
        }
    }
    
    
    public boolean dfs(char[][] board, int a, int b) {
        if (a < 0 || a >= board.length || b < 0 || b >= board[0].length
           || board[a][b] == 'X' || board[a][b] == 'V') return true; 
        if (a == 0 || a == board.length - 1 || b == 0 || b == board[0].length - 1) return false; 
        
        board[a][b] = 'V'; 

        for (int i = 0; i < DIR.length - 1; i++) {
            if (!dfs(board, a + DIR[i], b + DIR[i + 1])) return false; 
        }
        
        return true; 
    }
}
