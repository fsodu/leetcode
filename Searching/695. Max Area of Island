class Solution {
    
    private int[] DIR = new int[]{1, 0, -1, 0, 1};
    
    public int maxAreaOfIsland(int[][] grid) {
        int maxSize = 0; 
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
    
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        int max = 0; 
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                max = Math.max(max, dfs(grid, i, j, visited, 0));
            }
        }
        return max; 
        
        
    }
    
    public int dfs(int[][] grid, int a, int b, boolean[][] visited, int size) {
        if (visited[a][b]) return size; 
        visited[a][b] = true; 
        if (grid[a][b] == 0) return 0;
        size++;
        for (int i = 0; i < DIR.length - 1; i++) {
            int row = a + DIR[i];
            int col = b + DIR[i + 1];
            if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) continue; 
            if (grid[row][col] == 0) continue; 
            size = dfs(grid, row, col, visited, size);
        }
        return size; 
    }
}


/* simpler solution */

private int m, n;
private int[][] direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

public int maxAreaOfIsland(int[][] grid) {
    if (grid == null || grid.length == 0) {
        return 0;
    }
    m = grid.length;
    n = grid[0].length;
    int maxArea = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            maxArea = Math.max(maxArea, dfs(grid, i, j));
        }
    }
    return maxArea;
}

private int dfs(int[][] grid, int r, int c) {
    if (r < 0 || r >= m || c < 0 || c >= n || grid[r][c] == 0) {
        return 0;
    }
    grid[r][c] = 0;
    int area = 1;
    for (int[] d : direction) {
        area += dfs(grid, r + d[0], c + d[1]);
    }
    return area;
}
