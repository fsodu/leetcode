class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) return result; 
        backtrack(nums, 0, new ArrayList<>(), result);
        return result; 
    }
    
    public void backtrack(int[] nums, int start, 
                          List<Integer> temp, List<List<Integer>> result) {
        for (int i = start; i <= nums.length; i++) {
            if (i == nums.length) {
                result.add(new ArrayList<>(temp));
                return;
            }
            temp.add(nums[i]);
            backtrack(nums, i + 1, temp, result); 
            temp.remove(temp.size() - 1);
        }
    }
}

//second solution

public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> subsets = new ArrayList<>();
    List<Integer> tempSubset = new ArrayList<>();
    for (int size = 0; size <= nums.length; size++) {
        backtracking(0, tempSubset, subsets, size, nums); // 不同的子集大小
    }
    return subsets;
}

private void backtracking(int start, List<Integer> tempSubset, List<List<Integer>> subsets,
                          final int size, final int[] nums) {

    if (tempSubset.size() == size) {
        subsets.add(new ArrayList<>(tempSubset));
        return;
    }
    for (int i = start; i < nums.length; i++) {
        tempSubset.add(nums[i]);
        backtracking(i + 1, tempSubset, subsets, size, nums);
        tempSubset.remove(tempSubset.size() - 1);
    }
}
