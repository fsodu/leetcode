class Solution {
    
    private int[][] DIR = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    
    public boolean exist(char[][] board, String word) {
        
        boolean exist = false; 
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(word.length() - 1)) {
                    boolean[][] used = new boolean[board.length][board[0].length];
                    if (backtrack(board, i, j, word, used)) return true;
                }
            }
        }
        return exist; 
    }
    
    public boolean backtrack(char[][] board, int a, int b, String word, boolean[][] used)  {
        if (a < 0 || b < 0 || a >= board.length || b >= board[0].length || used[a][b]) return false;
        
        if (board[a][b] != word.charAt(word.length() - 1)) return false;
        if (word.length() == 1) return true; 
        used[a][b] = true;
        String nextWord = word.substring(0, word.length() - 1);
        
        for (int[] dirs : DIR) {
            int row = a + dirs[0];
            int col = b + dirs[1];
            if (backtrack(board, row, col, nextWord, used)) return true;
        }
        used[a][b] = false;
        return false; 
    }
    
}
