class Solution {
    
    public int[] DIR = new int[]{-1, 0, 1, 0, -1};
    
    public boolean exist(char[][] board, String word) {
        
        if (board == null || board.length == 0) return false; 
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    boolean[][] used = new boolean[board.length][board[0].length];
                    used[i][j] = true;
                    if (search(board, word, i, j, 1, used)) return true; 
                }
            }
        }
        
        return false; 
    }
    
    public boolean search(char[][] board, String word, int r, int c, int index, boolean[][] used) {
        if (index == word.length()) return true; 
        
        for (int i = 1; i < DIR.length; i++) {
            int row = r + DIR[i]; 
            int col = c + DIR[i - 1];
            if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || used[row][col]) continue; 
            if (board[row][col] == word.charAt(index)) {
                used[row][col] = true;
                if (search(board, word, row, col, index + 1, used)) return true; 
                used[row][col] = false; 
            }
        }
        return false; 
    }
}


