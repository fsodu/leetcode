class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        if (s == null || s.length() == 0) return result; 
        backtrack(s, 0, new ArrayList<>(), result);
        return result; 
    }
    
    public void backtrack(String s, int start, List<String> temp, List<List<String>> result) {
        if (start == s.length()) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (!isPalindrome(s, start, i)) continue;
            temp.add(s.substring(start, i + 1));
            backtrack(s, i + 1, temp, result);
            temp.remove(temp.size() - 1);
        }
    }
    
    public boolean isPalindrome(String s, int start, int end) {
        if (start > end) return false; 
        while (start < end) {
            if (s.charAt(start) - s.charAt(end) != 0) return false;
            start++;
            end--;
        }
        return true; 
    }
}
