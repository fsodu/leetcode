class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i <= nums.length; i++) {
            backtrack(nums, 0, i, new boolean[nums.length], new ArrayList<>(), result);
        }
        return result; 
    }
    
    public void backtrack(int[] nums, int start, int size, boolean[] used,
                          List<Integer> temp, List<List<Integer>> result) {
        if (temp.size() == size) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue;
            temp.add(nums[i]);
            used[i] = true; 
            backtrack(nums, i + 1, size, used, temp, result);
            temp.remove(temp.size() - 1);
            used[i] = false; 
        }
        
        
    }
}
