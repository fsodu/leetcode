class Solution {
    
    public int numSquares(int n) {
        
        if ((int)Math.sqrt(n) * (int)Math.sqrt(n) == n) return 1; 
        
        Queue<Integer> q = new ArrayDeque<>();
        q.offer(0);
        int count = 0; 
        int currLevel = 1; 
        
        while (!q.isEmpty()) {
            int size = q.size();
            for (int k = 0; k < size; k++) {
                int curr = q.poll();
                for (int i = 1; i <= Math.sqrt(n); i++) {
                    if (curr + i * i > n) continue;
                    if (curr + i * i == n) return count + 1; 
                    q.offer(curr + i * i);
                }
            }
            count++;
        }
        
        return -1; 
        
    }
    
    
}

//可以将每个整数看成图中的一个节点，如果两个整数之差为一个平方数，那么这两个整数所在的节点就有一条边。
//要求解最小的平方数数量，就是求解从节点 n 到节点 0 的最短路径。
//本题也可以用动态规划求解，在之后动态规划部分中会再次出现。
