class Solution {
    
    public int[] DIR = new int[]{1, 0, 1, 1, -1, 0, -1, -1, 1};

    
    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid.length == 0 || grid[0].length == 0 || grid[0][0] == 1) return -1; 
        if (grid.length == 1 && grid[0].length == 1) return (grid[0][0] == 0) ? 1 : -1; 

        Queue<int[]> q = new ArrayDeque<>();
        int count = 1; 
        int levelCt = 1; 
        
        q.offer(new int[]{0, 0});
        grid[0][0] = 1; 
        
        while (!q.isEmpty()) {
            int currLevel = levelCt; 
            levelCt = 0; 
            for (int node = 0; node < currLevel; node++) {
                
                int[] curr = q.poll();

                for (int i = 0; i < DIR.length - 1; i++) {
                    int[] next = new int[]{curr[0] + DIR[i], curr[1] + DIR[i + 1]}; 
                    if (next[0] < 0 || next[0] >= grid.length 
                        || next[1] < 0 || next[1] >= grid[0].length) continue;
                    if (grid[next[0]][next[1]] == 1) continue; 
                    if (next[0] == grid.length - 1 && next[1] == grid[0].length - 1) {
                        return count + 1; 
                    }
                    q.offer(next);
                    levelCt++;
                    grid[next[0]][next[1]] = 1; 
                    System.out.println("added = " + next[0] + ", " + next[1]);
                }
            }
            count++; 
        }
        
        return -1; 
        
    }
}
