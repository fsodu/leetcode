class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) return result; 
        Arrays.sort(nums);
        backtrack(nums, new boolean[nums.length], new ArrayList<>(), result);
        return result; 
        
    }
    
    public void backtrack(int[] nums, boolean[] visited, List<Integer> temp, List<List<Integer>> result) {
        if (temp.size() == nums.length) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) continue;
            if (i > 0 && !visited[i - 1] && nums[i] == nums[i - 1]) continue;
            temp.add(nums[i]);
            visited[i] = true;
            backtrack(nums, visited, temp, result);
            temp.remove(temp.size() - 1);
            visited[i] = false;
        }
        
    }
}
